import math


def get_link_start(start, matrix):
    """
    :param start: просматриваемая вершина
    :param matrix: матрица смежности
    :return: возвращает вершины, которые связаны с вершиной start напрямую
    """
    for i, weight in enumerate(matrix[start]):
        # Функция enumerate() позволяет перебирать элементы матрицы, отслеживая индекс элемента
        if weight > 0:
            # Функция-генератор (не сохраняет данные в памяти)
            yield i


def arg_min(last_line, viewed_peaks):
    """ Возвращает минимальное значение в last_line, которое мы еще не просмотерли,
    Значение -1 означает, что все вершины просмотрены"""
    amin = -1
    m = max(last_line)
    for i, t in enumerate(last_line):
        if t < m and i not in viewed_peaks:
            m = t
            amin = i

    return amin

"""
На случай, если придется работать с файлами (Ввод)
with open('stdin.txt', 'r') as file_object:        
    reader = csv.reader(file_object)
    for row in reader:
        info = row
        start = int(info[0]) - 1                              
        finish = int(info[1]) - 1
"""

start, finish = map(int, input().split(","))
start -= 1
finish -= 1

# Матрица смежности
matrix =   ((  0, 8.6,  8.7,    0,    0,   0,    0,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0),
            (8.6,   0,  9.2,  9.7,    0,   0,   11,   0,    0,  9.4,    0,    0,    0,    0,    0,    0,    0),
            (8.7, 9.2,    0, 10.5,    0, 7.2,  8.9,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0),
            (  0, 9.7, 10.5,    0,  9.1,   0,    0,   0,    0,  8.9, 10.1,    0,    0,    0,    0,    0,    0),
            (  0,   0,    0,  9.1,    0,   0,    0,   0,    0,    0,    0,    0, 11.9,    0,    0,    0,    0),
            (  0,   0,  7.2,    0,    0,   0,    0,   6,    0,    0,    0,    0,    0,    0,    0,    0,    0),
            (  0,  11,  8.9,    0,    0,   0,    0, 9.3, 10.1,  7.6,    0,    0,    0,    0,    0,    0,    0),
            (  0,   0,    0,    0,    0,   6,  9.3,   0,  9.9,    0,    0,    0,    0,    0,    0,    0,    0),
            (  0,   0,    0,    0,    0,   0, 10.1, 9.9,    0,    0,  9.4,    0,    0, 12.3,    0,    0,    0),
            (  0, 9.4,    0,  8.9,    0,   0,  7.6,   0,    0,    0,    0, 11.3,    0,    0,    0,    0,    0),
            (  0,   0,    0, 10.1,    0,   0,    0,   0,  9.4,    0,    0, 12.8,    0, 10.4,    0,    0,    0),
            (  0,   0,    0,    0,    0,   0,    0,   0,    0, 11.3, 12.8,    0,    5,    0, 11.1,    0,    0),
            (  0,   0,    0,    0, 11.9,   0,    0,   0,    0,    0,    0,    5,    0,    0,    0,    0,    6),
            (  0,   0,    0,    0,    0,   0,    0,   0, 12.3,    0, 10.4,    0,    0,    0,    7,   12,    0),
            (  0,   0,    0,    0,    0,   0,    0,   0,    0,    0,    0, 11.2,    0,    7,    0,   12,    0),
            (  0,   0,    0,    0,    0,   0,    0,   0,    0,    0,    0,    0,    0,   12,   12,    0, 11.9),
            (  0,   0,    0,    0,    0,   0,    0,   0,    0,    0,    0,    0,    6,    0,    0, 11.9,    0))

# Находим число ВЕРШИН в смежном графе
length = len(matrix)
# Инициализируем последнюю строку в таблице (бесконечность)
last_line = [math.inf] * length

# Просмотренные вершины
viewed_peaks = {start}
# Для стартовой вершины нулевой вес (главная диагональ).
# Стартовая вершина уже инициализирована из файла
last_line[start] = 0

# Условие - пока не просмотрим все вершины
while start != -1:
    # Перебор связанных вершин
    for j in get_link_start(start, matrix):
        # Если вершина еще не просмотрена, то мы формируем для нее вес (длина пути по факту)
        if j not in viewed_peaks:
            w = last_line[start] + matrix[start][j]
            # Если текущий вес для j-ой вершины меньше, чем тот,
            # что уже записан, то мы формируем новый вес
            if w < last_line[j]:
                last_line[j] = w

    # Выбрали вершину с минимальным весом
    start = arg_min(last_line, viewed_peaks)
    # Если она не последняя, то добавляем ее в просмотренные врешины
    if start >= 0:
        viewed_peaks.add(start)

# Округляем длины путей
for i in range(len(last_line)):
    last_line[i] = round(last_line[i],2)

print(last_line[finish])

"""
На случай работы с файлами (Вывод)
with open('stdout.txt', 'w+') as file_object:
    file_object.write(str(last_line[finish]))
"""